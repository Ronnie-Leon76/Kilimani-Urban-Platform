generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ConsultationComment {
  id                 String             @id
  consultationId     String
  userId             String
  comment            String
  vote               String?
  createdAt          DateTime           @default(now())
  PublicConsultation PublicConsultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ConsultationVote {
  id                 String             @id
  consultationId     String
  userId             String
  vote               String
  createdAt          DateTime           @default(now())
  PublicConsultation PublicConsultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([consultationId, userId])
}

model DevelopmentPlan {
  id          String   @id
  title       String
  description String
  coordinates Json
  status      String
  approvedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FloodRiskArea {
  id          String   @id
  name        String
  coordinates Json
  riskLevel   String
  lastUpdated DateTime @default(now())
  predictions Json?
}

model PublicConsultation {
  id                  String                @id
  title               String
  description         String
  startDate           DateTime
  endDate             DateTime
  status              String
  coordinates         Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ConsultationComment ConsultationComment[]
  ConsultationVote    ConsultationVote[]
}

model Report {
  id                  String              @id
  title               String
  description         String
  type                ReportType
  status              ReportStatus        @default(PENDING)
  priority            Priority            @default(MEDIUM)
  latitude            Float
  longitude           Float
  address             String?
  images              String[]
  userId              String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  resolvedAt          DateTime?
  infringedLaws       String[]
  lawAnalysisDate     DateTime?
  publicVotingEnabled Boolean             @default(false)
  votesFor            Int                 @default(0)
  votesAgainst        Int                 @default(0)
  votingDeadline      DateTime?
  meetingScheduled    Boolean             @default(false)
  meetingDate         DateTime?
  meetingMinutes      String?
  finalVerdict        String?
  verdictDate         DateTime?
  User                User                @relation(fields: [userId], references: [id])
  ReportUpdate        ReportUpdate[]
  ReportVote          ReportVote[]
  SatelliteAnalysis   SatelliteAnalysis[]
  ReportEscalation    ReportEscalation[]
  ReportActivity      ReportActivity[]
  CommunityMeeting    CommunityMeeting[]
}

model ReportUpdate {
  id        String        @id
  reportId  String
  message   String
  status    ReportStatus?
  createdAt DateTime      @default(now())
  updatedBy String?
  Report    Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportVote {
  id        String   @id
  reportId  String
  userId    String
  vote      String
  comment   String?
  createdAt DateTime @default(now())
  Report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
}

model SatelliteAnalysis {
  id              String   @id
  reportId        String?
  analysisType    String
  latitude        Float
  longitude       Float
  confidence      Float
  detectedChanges Json?
  imageUrl        String?
  analysisDate    DateTime @default(now())
  createdAt       DateTime @default(now())
  Report          Report?  @relation(fields: [reportId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id
  name                String?
  email               String                @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole              @default(RESIDENT)
  phoneNumber         String?
  location            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Account             Account[]
  ConsultationComment ConsultationComment[]
  ConsultationVote    ConsultationVote[]
  Report              Report[]
  ReportVote          ReportVote[]
  Session             Session[]
  EscalationsCreated  ReportEscalation[]  @relation("EscalatedBy")
  EscalationsResolved ReportEscalation[]  @relation("ResolvedBy")
  ReportActivity      ReportActivity[]
  CommunityMeeting    CommunityMeeting[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WaterDemandAnalysis {
  id                String   @id
  area              String
  coordinates       Json
  populationDensity Float
  predictedDemand   Float
  currentSupply     Float?
  shortage          Float?
  analysisDate      DateTime @default(now())
}

model ReportEscalation {
  id               String   @id @default(cuid())
  reportId         String
  escalatedBy      String
  escalationType   String
  escalationLevel  String
  votingData       Json?
  escalationReason String
  escalatedAt      DateTime @default(now())
  status           String   @default("PENDING")
  priority         String   @default("HIGH")
  resolvedAt       DateTime?
  resolvedBy       String?
  resolution       String?
  Report           Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  EscalatedBy      User     @relation("EscalatedBy", fields: [escalatedBy], references: [id])
  ResolvedBy       User?    @relation("ResolvedBy", fields: [resolvedBy], references: [id])
}

model ReportActivity {
  id          String   @id @default(cuid())
  reportId    String
  userId      String
  action      String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  Report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id])
}

model CommunityMeeting {
  id            String   @id @default(cuid())
  reportId      String?
  title         String
  description   String
  scheduledDate DateTime
  location      String
  organizer     String
  status        String   @default("SCHEDULED")
  meetingType   String
  agenda        String[]
  minutes       String?
  attendees     String[]
  outcomes      String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Report        Report?  @relation(fields: [reportId], references: [id])
  Organizer     User     @relation(fields: [organizer], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
  ESCALATED
  UNDER_REVIEW
}

enum ReportType {
  INFRASTRUCTURE
  WATER_SHORTAGE
  FLOODING
  WASTE_MANAGEMENT
  ILLEGAL_DEVELOPMENT
  OTHER
}

enum UserRole {
  RESIDENT
  GOVERNMENT_OFFICIAL
  ADMIN
}
